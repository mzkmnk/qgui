/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 基本ヘルスチェック
         * @description アプリケーションの基本的な稼働状態を確認
         */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/websocket": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * WebSocketサービスヘルスチェック
         * @description WebSocketサービスの稼働状態を確認
         */
        get: operations["getWebSocketHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/pty": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * PTYサービスヘルスチェック
         * @description PTYプロセス管理サービスの稼働状態を確認
         */
        get: operations["getPtyHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/connection/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 接続状態の取得
         * @description 現在のWebSocketおよびPTY接続の状態を取得
         */
        get: operations["getConnectionStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/debug/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * デバッグ情報の取得
         * @description アプリケーションのデバッグ情報を取得（開発環境のみ）
         */
        get: operations["getDebugInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthResponse: {
            /**
             * @description サービスの健全性状態
             * @enum {string}
             */
            status: "healthy" | "unhealthy";
            /**
             * Format: date-time
             * @description チェック時刻
             */
            timestamp: string;
            /**
             * @description アプリケーションバージョン
             * @example 1.0.0
             */
            version?: string;
        };
        ServiceHealthResponse: components["schemas"]["HealthResponse"] & {
            /**
             * @description サービス名
             * @enum {string}
             */
            service: "websocket" | "pty";
            /** @description サービス固有の詳細情報 */
            details?: {
                [key: string]: unknown;
            };
        };
        ConnectionStatusResponse: {
            websocket: components["schemas"]["WebSocketStatus"];
            pty: components["schemas"]["PTYStatus"];
            /**
             * Format: date-time
             * @description 状態取得時刻
             */
            timestamp: string;
        };
        WebSocketStatus: {
            /** @description WebSocket接続状態 */
            connected: boolean;
            /** @description アクティブな接続数 */
            activeConnections: number;
            /**
             * Format: date-time
             * @description 最後のアクティビティ時刻
             */
            lastActivity?: string;
        };
        PTYStatus: {
            /** @description PTYサービス利用可能状態 */
            available: boolean;
            /** @description アクティブなPTYセッション数 */
            activeSessions: number;
            /** @description 最大セッション数 */
            maxSessions?: number;
        };
        DebugInfoResponse: {
            /**
             * @description 実行環境
             * @example development
             */
            environment: string;
            /** @description 稼働時間（秒） */
            uptime: number;
            memory: components["schemas"]["MemoryUsage"];
            /** @description WebSocketデバッグ情報 */
            websocketDebug?: {
                [key: string]: unknown;
            };
            /** @description PTYデバッグ情報 */
            ptyDebug?: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @description 情報取得時刻
             */
            timestamp: string;
        };
        MemoryUsage: {
            /** @description 使用中のヒープメモリ（バイト） */
            heapUsed: number;
            /** @description 総ヒープメモリ（バイト） */
            heapTotal: number;
            /** @description Resident Set Size（バイト） */
            rss: number;
            /** @description 外部メモリ使用量（バイト） */
            external?: number;
        };
        ErrorResponse: {
            /** @description エラーコード */
            error: string;
            /** @description エラーメッセージ */
            message: string;
            /** @description 追加のエラー詳細情報 */
            details?: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @description エラー発生時刻
             */
            timestamp: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description アプリケーションは正常に稼働中 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
            /** @description サービス利用不可 */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getWebSocketHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WebSocketサービスは正常に稼働中 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceHealthResponse"];
                };
            };
            /** @description WebSocketサービス利用不可 */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getPtyHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description PTYサービスは正常に稼働中 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceHealthResponse"];
                };
            };
            /** @description PTYサービス利用不可 */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getConnectionStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 接続状態の詳細情報 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionStatusResponse"];
                };
            };
            /** @description 内部サーバーエラー */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDebugInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description デバッグ情報 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DebugInfoResponse"];
                };
            };
            /** @description 本番環境ではアクセス禁止 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description 内部サーバーエラー */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
